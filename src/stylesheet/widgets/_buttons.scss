// stuff for .needs-attention
@keyframes needs_attention {
  from { background-image: radial-gradient(farthest-side, $accent_bg_color 0%, transparent 0%); }
  to { background-image: radial-gradient(farthest-side, $accent_bg_color 95%, transparent); }
}

%button,
button {
  @at-root %button_basic, & {
    min-height: 24px;
    min-width: 16px;
    padding: 4px 9px;
    border-radius: $button_radius;
    font-weight: bold;
    border: 1px solid $button_border_color;
    background-clip: padding-box;

    @include focus-ring();
    transition: $button_transition;

    &:hover {
      background-color: $view_hover_color;
    }

    &.keyboard-activating,
    &:active {
      background-color: $view_active_color;
    }

    &:checked {
      background-color: $view_selected_color;

      &:hover {
        background-color: $view_selected_hover_color;
      }

      &.keyboard-activating,
      &:active {
        background-color: $view_selected_active_color;
      }
    }

    &:disabled {
      filter: opacity(.5);

      label {
        filter: none;
      }
    }

    &.image-button {
      min-width: 24px;
      padding-left: 5px;
      padding-right: 5px;
    }

    &.text-button {
      padding-left: 16px;
      padding-right: 16px;
    }

    &.text-button.image-button {
      padding-left: 8px;
      padding-right: 8px;

      label {
        padding-left: 8px;
        padding-right: 8px;
      }
    }

    @at-root %button_basic_drop_active,
    &:drop(active) {
      color: $drop_target_color;
      border-color: $drop_target_color;
      box-shadow: none;
    }
  }

  @at-root %osd_button,
  &.osd {
    min-width: 32px;
    min-height: 32px;
    @include focus-ring($outer: true, $offset: 1px);
    transition: $button_transition;

    color: $osd_fg_color;
    background-color: $osd_bg_color;

    // border-color is not enough since non-button .osd overrides borders
    border: 1px solid if($contrast == 'high', currentColor, transparent);
    background-clip: border-box;
    background-origin: border-box;

    &:hover {
      color: white;
      background-color: lighten($osd_bg_color, 10%);
    }

    &.keyboard-activating,
    &:active {
      color: white;
      background-color: darken($osd_bg_color, 20%);
    }

    &:checked {
      background-color: darken($osd_bg_color, 15%);

      &:hover {
        background-color: darken($osd_bg_color, 5%);
      }

      &.keyboard-activating,
      &:active {
        background-color: darken($osd_bg_color, 30%);
      }
    }

    // Specificity bump
    &:drop(active) {
      @extend %button_basic_drop_active;
    }
  }

  @at-root %filled_button {
    @include focus-ring($outer: true, $offset: 1px);
    transition: $button_transition;
    border-color: transparent;
    background-clip: border-box;
    background-origin: border-box;

    &:hover {
      background-image: image(gtkalpha(currentColor, .1));
    }

    &.keyboard-activating,
    &:active {
      background-image: image(transparentize(black, .8));
    }

    &:checked {
      background-image: image(transparentize(black, .85));

      &:hover {
        background-image: image(transparentize(black, .95));
      }

      &.keyboard-activating,
      &:active {
        background-image: image(transparentize(black, .7));
      }
    }

    // Specificity bump
    &:drop(active) {
      @extend %button_basic_drop_active;
    }
  }

  &.destructive-action {
    @extend %filled_button;

    color: $destructive_fg_color;

    &, &:checked {
      background-color: $destructive_bg_color;
    }
  }

  &.suggested-action {
    @extend %filled_button;

    color: $accent_fg_color;

    &, &:checked {
      background-color: $accent_bg_color;
    }
  }

  @at-root %button_basic_flat,
  &.flat {
    background: transparent;
    @include focus-ring();
    transition: $button_transition;
    border-color: transparent;

    @if $contrast == 'high' {
      &:hover,
      &.keyboard-activating,
      &:active,
      &:checked {
        border-color: $button_border_color;
      }
    }

    &:hover {
      background: $view_hover_color;
    }

    &.keyboard-activating,
    &:active {
      background: $view_active_color;
    }

    &:checked {
      background: $view_selected_color;

      &:hover {
        background: $view_selected_hover_color;
      }

      &.keyboard-activating,
      &:active {
        background: $view_selected_active_color;
      }
    }

    &.suggested-action {
      color: $accent_color;
    }

    &.destructive-action {
      color: $destructive_color;
    }

    // Specificity bump
    &:drop(active) {
      @extend %button_basic_drop_active;
    }
  }

  stackswitcher > & {
    // to position the needs attention dot, padding is added to the button
    // child, a label needs just lateral padding while an icon needs vertical
    // padding added too.

    > label {
      padding: 0 6px;
      margin: 0 -6px;
    }

    > image {
      padding: 3px 6px;
      margin: -3px -6px;
    }

    &.needs-attention {
      > label,
      > image { @extend %needs_attention; }
    }
  }

  // hide separators
  &.font {
    separator { background-color: transparent; }
    > box { border-spacing: 6px; }
    > box > box > label { font-weight: bold; }
  }

  @at-root %circular_button,
  &.circular { // force circular button shape
    min-width: 32px;
    min-height: 32px;
    padding: 0;
    border-radius: 9999px;

    label { padding: 0; }
  }
}

%needs_attention {
  // the dot is drawn by using two radial gradient, the first one is the actual dot, the other
  // simulates the shadow labels and icons normally have in buttons.
  animation: needs_attention 150ms ease-in;

  background-image: radial-gradient(farthest-side, $accent_bg_color 96%, transparent);
  background-size: 6px 6px, 6px 6px;
  background-repeat: no-repeat;

  @if $variant == 'light' { background-position: right 3px, right 4px; }

  @else { background-position: right 3px, right 2px; }

  &:dir(rtl) {
    @if $variant == 'light' { background-position: left 3px, left 4px; }

    @else { background-position: left 3px, left 2px; }
  }
}

%undecorated_button {
  background-color: transparent;
}

button.color {
  padding: 4px;

  > colorswatch:only-child {
    border-radius: 2.5px;

    > overlay {
      border-radius: 2px;
    }

    &:disabled {
      filter: none;
    }

    @if $variant == 'light' {
      &.light > overlay {
        border-color: transparentize(black, .8);
      }
    }
  }
}

menubutton {
  > button > box {
    border-spacing: 6px;
  }

  > button.arrow-button > box {
    border-spacing: 3px;
  }

  &.osd {
    background: none;
    color: inherit;

    > button { @extend %osd_button; }
  }

  &.circular > button { @extend %circular_button; }
  &.flat > button { @extend %button_basic_flat; }

  arrow {
    min-height: 16px;
    min-width: 16px;
    &.none {
      -gtk-icon-source: -gtk-icontheme('open-menu-symbolic');
    }
    &.down {
      -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    }
    &.up {
      -gtk-icon-source: -gtk-icontheme('pan-up-symbolic');
    }
    &.left {
      -gtk-icon-source: -gtk-icontheme('pan-start-symbolic');
    }
    &.right {
      -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
    }
  }
}
